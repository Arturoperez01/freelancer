/* 
* Generated by
* 
*      _____ _          __  __      _     _
*     / ____| |        / _|/ _|    | |   | |
*    | (___ | | ____ _| |_| |_ ___ | | __| | ___ _ __
*     \___ \| |/ / _` |  _|  _/ _ \| |/ _` |/ _ \ '__|
*     ____) |   < (_| | | | || (_) | | (_| |  __/ |
*    |_____/|_|\_\__,_|_| |_| \___/|_|\__,_|\___|_|
*
* The code generator that works in many programming languages
*
*			https://www.skaffolder.com
*
*
* You can generate the code from the command-line
*       https://npmjs.com/package/skaffolder-cli
*
*       npm install -g skaffodler-cli
*
*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *
*
* To remove this comment please upgrade your plan here: 
*      https://app.skaffolder.com/#!/upgrade
*
* Or get up to 70% discount sharing your unique link:
*       https://beta.skaffolder.com/#!/register?friend=5d122668c0161c5b2b76f322
*
* You will get 10% discount for each one of your friends
* 
*/
// Import Libraries
import { Component, OnInit } from '@angular/core';
import { Location } from '@angular/common';
import { ActivatedRoute } from '@angular/router';
// Import Services
import { ServicioService } from '../../services/servicio.service';
// Import Models
import { Servicio } from '../../domain/newtest_db/servicio';
import { Evento } from '../../domain/newtest_db/evento';
import { User } from '../../domain/newtest_db/user';

// START - USED SERVICES
/**
* servicioService.create
*	@description CRUD ACTION create
*	@param servicio obj Object to insert
*
* servicioService.get
*	@description CRUD ACTION get
*	@param ObjectId id Id servicio
*	@returns servicio
*
* servicioService.update
*	@description CRUD ACTION update
*	@param ObjectId id Id servicio
*	@returns servicio
*
*/
// END - USED SERVICES

/**
 * This component allows to edit a Servicio
 */
@Component({
    selector: 'app-servicio-edit',
    templateUrl: 'servicio-edit.component.html',
    styleUrls: ['servicio-edit.component.css']
})
export class ServicioEditComponent implements OnInit {
    item: Servicio;
    listEvento_servicio: Servicio[];
    listUser_servicio: Servicio[];
    externalEvento: Evento[];
    externalUser: User[];
    model: Servicio;
    formValid: Boolean;

    constructor(
    private servicioService: ServicioService,
    private route: ActivatedRoute,
    private location: Location) {
        // Init item
        this.item = new Servicio();
        this.externalEvento = [];
        this.externalUser = [];
    }

    /**
     * Init
     */
    ngOnInit() {
        this.route.params.subscribe(param => {
            const id: string = param['id'];
            if (id !== 'new') {
                this.servicioService.get(id).subscribe(item => this.item = item);
                this.eventoService.findByEvento_servicio(id).subscribe(list => this.externalEvento = list);
                this.userService.findByUser_servicio(id).subscribe(list => this.externalUser = list);
            }
            // Get relations
        });
    }


    /**
     * Save Servicio
     *
     * @param {boolean} formValid Form validity check
     * @param Servicio item Servicio to save
     */
    save(formValid: boolean, item: Servicio): void {
        this.formValid = formValid;
        if (formValid) {
            if (item._id) {
                this.servicioService.update(item).subscribe(data => this.goBack());
            } else {
                this.servicioService.create(item).subscribe(data => this.goBack());
            } 
        }
    }

    /**
     * Go Back
     */
    goBack(): void {
        this.location.back();
    }


}



